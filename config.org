#+TITLE: Emacs Init Config in Org Mode
#+AUTHOR: [[https://github.com/VicenteMoraes][VicenteMoraes]]

* Dashboard screenshot
[[./images/dashboard_screenshot.png]]


* Info
My first emacs config, loosely based on [[https://github.com/daedreth/UncleDavesEmacs][UncleDave's emacs]]. 
Might switch to doom-emacs or evil mode if I'm feeling cute.

I currently use i3wm. Check out the [[file:config.org][config.org]] for more info.

* Prerequisites
** Python
Python prerequisites for company mode.
#+begin_src bash :tangle yes
  pip install jedi autopep8 flake8 virtualenv
#+end_src

** Common Lisp
Just install [[http://www.sbcl.org/][sbcl]] and [[https://www.quicklisp.org/beta/][quicklisp]] for packages.

* Screenshot

[[./images/python.png]]

* Org
Keeping yourself organised
** Keybinds
#+begin_src emacs-lisp :tangle yes
  (global-set-key (kbd "C-c l") 'org-store-link)
  (global-set-key (kbd "C-c a") 'org-agenda)
  (global-set-key (kbd "C-c c") 'org-capture)
#+end_src

** Org src on the same window
#+begin_src emacs-lisp :tangle yes
  (setq org-src-window-setup 'current-window)
#+end_src

* Ido
Improves searching considerably
** Enable Ido Mode
#+begin_src emacs-lisp :tangle yes
  (setq ido-enable-flex-matching t)
  (setq ido-create-new-buffer 'always)
  (setq ido-everywhere t)
  (ido-mode 1)
#+end_src

* Beacon
Highlights the current line when you switch buffers
#+begin_src emacs-lisp :tangle yes
  (use-package beacon
    :ensure t
    :config (beacon-mode 1))
#+end_src

* Company
Auto completion
#+begin_src emacs-lisp :tangle yes
  (use-package company
    :ensure t
    :init (add-hook 'after-init-hook 'global-company-mode)
    :config
    (setq company-idle-delay 0)
    (setq company-minimum-prefix-length 3)
    (define-key company-active-map (kbd "M-n") nil)
    (define-key company-active-map (kbd "M-p") nil)
    (define-key company-active-map (kbd "C-n") #'company-select-next)
    (define-key company-active-map (kbd "C-p") #'company-select-previous)
    (define-key company-active-map (kbd "SPC") #'company-abort)
    (setq company-backends '((company-dabbrev-code company-elisp))))
#+end_src

* Sudo-edit
Easy sudo editing within emacs
#+begin_src emacs-lisp :tangle yes
  (use-package sudo-edit
    :ensure t
    :bind ("C-c sudo" . sudo-edit))
#+end_src
* Which-key
Utility for checking out what keys do
#+begin_src emacs-lisp :tangle yes
  (use-package which-key
    :ensure t
    :init (which-key-mode))
#+end_src

* Smex
Ido for M-x
#+begin_src emacs-lisp :tangle yes
(use-package smex
    :ensure t
    :init (smex-initialize)
    :bind ("M-x" . smex))
#+end_src

* Projectile
Easy pretty project interface (Searching within projects)
#+begin_src emacs-lisp :tangle yes
  (use-package projectile
    :ensure t
    :config
    (define-key projectile-mode-map (kbd "C-x p") 'projectile-command-map)
    (projectile-mode 1))
#+end_src

* Dashboard
Pretty dashboard
#+begin_src emacs-lisp :tangle yes
  (setq inhibit-startup-message t)
  (use-package dashboard
    :ensure t
    :config
    (dashboard-setup-startup-hook)
    (setq dashboard-items '((recents . 7) (projects . 3)))
    (setq dashboard-banner-logo-title "Emacs do Vicente")
    (setq dashboard-set-navigator t)
    (setq dashboard-set-file-icons t)
    (setq dashboard-set-heading-icons t))
#+end_src

* All the Icons
Pretty icons for files, you also need to run all-the-icons-install-fonts.
#+begin_src emacs-lisp :tangle yes
  (use-package all-the-icons
    :ensure t)
#+end_src

* Doom-modeline
Substitute for the kinda crappy default one.
#+begin_src emacs-lisp :tangle yes
  (use-package doom-modeline
    :ensure t
    :init (doom-modeline-mode 1))
#+end_src

** Display time and battery on modeline
#+begin_src emacs-lisp :tangle yes
  (display-time-mode 1)
  (display-battery-mode 1)
#+end_src

* Magit
Git
#+begin_src emacs-lisp :tangle yes
  (use-package magit
    :ensure t
    :config
    (setq magit-push-always-verify nil)
    (setq git-commit-summary-max-length 50)
    :bind
    ("M-s" . magit-status))
#+end_src

* Avy
Searches by char on screen
#+begin_src emacs-lisp :tangle yes
  (use-package avy
    :ensure t
    :bind
    ("C-." . avy-goto-char)
    ("C->" . avy-goto-line))
#+end_src

* Hungry Delete
Deletes all whitespace it can
#+begin_src emacs-lisp :tangle yes
  (use-package hungry-delete
    :ensure t
    :config (global-hungry-delete-mode))
#+end_src
* Text
** Keybinds
*** Set begin_src macro for org mode to <C-c> src
#+begin_src emacs-lisp :tangle yes
  (defun get-org-src ()
    (interactive)
    (insert "#+begin_src\s\n\n#+end_src")
    (forward-line -2)
    (end-of-line))
  (global-set-key (kbd "C-c src") 'get-org-src)
#+end_src

*** Swap C-a (beginning-of-line) and M-m (back-to-indentation)
#+begin_src emacs-lisp :tangle yes
  (global-set-key (kbd "C-a") nil)
  (global-set-key (kbd "M-m") nil)
  (global-set-key (kbd "C-a") 'back-to-indentation)
  (global-set-key (kbd "M-m") 'beginning-of-line)
#+end_src

*** Set prog-indent-sexp to C-M-z
#+begin_src emacs-lisp :tangle yes
  (global-set-key (kbd "C-M-z") 'prog-indent-sexp)
#+end_src

*** Sets backward-kill-sexp to C-M-DEL
#+begin_src emacs-lisp :tangle yes
  (global-set-key (kbd "C-M-DEL") 'backward-kill-sexp)
#+end_src
** Utility
*** Always show matching parenthesis
#+begin_src emacs-lisp :tangle yes
(show-paren-mode 1)
#+end_src

*** Text wrapping
#+begin_src emacs-lisp :tangle yes
  (setq global-visual-line-mode t)
#+end_src
** Electric key pairs
#+begin_src emacs-lisp :tangle yes
  (setq electric-pair-pairs '(
			     (?\{ . ?\})
			     (?\( . ?\))
			     (?\[ . ?\])
			     (?\" . ?\")))
  (electric-pair-mode 1)
#+end_src

* Editor
** Bars
#+begin_src emacs-lisp :tangle yes
(tool-bar-mode 0)
(menu-bar-mode 0)
(scroll-bar-mode 0)
#+end_src

** Globals
#+begin_src emacs-lisp :tangle yes
  (global-hl-line-mode t)
  (global-subword-mode 1)
#+end_src

** Aliases
#+begin_src emacs-lisp :tangle yes
(defalias 'yes-or-no-p 'y-or-n-p)
#+end_src

** Appearance
*** Font
#+begin_src emacs-lisp :tangle yes
  (set-default-font "Ubuntu Mono:pixelsize=14:antialias=true:
		     autohint=true")
#+end_src

*** Theme - Seoul256
#+begin_src emacs-lisp :tangle yes
  (use-package seoul256-theme
    :ensure t
    :config
    (setq seoul256-background 233)
    (load-theme 'seoul256 t))
#+end_src

** Autosaves
*** Set backups to .emacs.d/backups
#+begin_src emacs-lisp :tangle yes
  (setq backup-directory-alist
	`((".*" . ,(concat user-emacs-directory "backups"))))
  (setq make-backup-files nil)
#+end_src

** UTF-8 enconding
#+begin_src emacs-lisp :tangle yes
  (setq locale-coding-system 'utf-8)
  (set-terminal-coding-system 'utf-8)
  (set-keyboard-coding-system 'utf-8)
  (set-selection-coding-system 'utf-8)
  (prefer-coding-system 'utf-8)
#+end_src
** Random Qol
*** Ignore Bell
#+begin_src emacs-lisp :tangle yes
(setq ring-bell-function 'ignore)
#+end_src

*** Less obnoxious scroll
#+begin_src emacs-lisp :tangle yes
(setq scroll-conservatively 100)
#+end_src

*** Enable disabled commands
#+begin_src emacs-lisp :tangle yes
  (setq disabled-command-function nil)
#+end_src

*** Disable C-z
#+begin_src emacs-lisp :tangle yes
  (global-set-key (kbd "C-z") nil)
#+end_src
*** Loads this config
#+begin_src emacs-lisp :tangle yes
  (defun load-my-org-config ()
    (interactive)
    (save-buffer)
    (org-babel-load-file (expand-file-name "config.org" user-emacs-directory)))
  (global-set-key (kbd "C-c eload") 'load-my-org-config)
#+end_src

*** Use asynchronous process wherever possible
#+begin_src emacs-lisp :tangle yes
  (use-package async
    :ensure t
    :init (dired-async-mode 1))
#+end_src

*** Show lines and columns on the modeline
#+begin_src emacs-lisp :tangle yes
  (line-number-mode 1)
  (column-number-mode 1)
#+end_src
** Buffers
*** Sets ibuffer and expert mode
#+begin_src emacs-lisp :tangle yes
  (global-set-key (kbd "C-x b") 'ibuffer)
  (setq ibuffer-expert t)
#+end_src

*** Sets ido-buffer
#+begin_src emacs-lisp :tangle yes
  (global-set-key (kbd "C-x C-b") 'ido-switch-buffer)
#+end_src

* Slime and Common Lisp
** Lisp interpretation mode
#+begin_src emacs-lisp :tangle yes
  (use-package slime
    :ensure t
    :config
    (setq inferior-lisp-program "/usr/bin/sbcl")
    (setq slime-contribs '(slime-fancy)))

  (use-package slime-company
    :ensure t
    :init
      (require 'company)
      (slime-setup '(slime-fancy slime-company)))
#+end_src

** Quicklisp Slime Helper
#+begin_src emacs-lisp :tangle yes
  (load (expand-file-name "/usr/lib/quicklisp/slime-helper.el"))
#+end_src

** Paredit
#+begin_src emacs-lisp :tangle yes
  (use-package paredit
    :ensure t
    :config
    (add-hook 'lisp-mode-hook 'paredit-mode)
    (add-hook 'emacs-lisp-mode-hook 'paredit-mode)
    (add-hook 'slime-repl-mode-hook 'paredit-mode))
#+end_src

* Flycheck
#+begin_src emacs-lisp :tangle yes
  (use-package flycheck
    :ensure t
    :init (global-flycheck-mode))
#+end_src

* Python
** Company auto-completion
Simple auto-completion for python with jedi
#+begin_src emacs-lisp :tangle yes
  (defun python-company-init ()
    (setq-local company-backends '((company-jedi
				company-dabbrev-code))))

  (use-package company-jedi
    :ensure t
    :config
    (require 'company)
    (add-hook 'python-mode-hook 'python-company-init))
#+end_src

** Python indent offset
#+begin_src emacs-lisp :tangle yes
  (setq python-indent-offset 4)
#+end_src

* C-like
** Company and Irony mode
#+begin_src emacs-lisp :tangle yes
  (use-package flycheck-clang-analyzer
    :ensure t
    :config
    (with-eval-after-load 'flycheck
      (require 'flycheck-clang-analyzer)
       (flycheck-clang-analyzer-setup)))

  (use-package company-c-headers
    :ensure t)

  (use-package company-irony
    :ensure t)

  (defun c-company-init ()
    (setq-local company-backends '((company-c-headers
			      company-dabbrev-code
			      company-irony))))

  (use-package irony
    :ensure t
    :config
    (add-hook 'c++-mode-hook 'c-company-init)
    (add-hook 'c-mode-hook 'c-company-init)
    (add-hook 'irony-mode-hook 'irony-cdb-autosetup-compile-options))
#+end_src

* Haskell
Haskell Mode for development
#+begin_src emacs-lisp :tangle yes
  (use-package haskell-mode
    :ensure t
    :config (setq haskell-process-type 'auto))
#+end_src

* Latex
** Document Previews
#+begin_src emacs-lisp :tangle yes
  (use-package latex-preview-pane
    :ensure t
    :config
    (add-hook 'TeX-mode-hook 'latex-preview-pane-mode))
#+end_src

** Sets auctex and auctex completion for company
#+begin_src emacs-lisp :tangle yes
  (defun tex-company-init ()
    (setq-local company-backends '((company-auctex company-dabbrev-code)))
    (company-auctex-init))
  
  (use-package company-auctex
    :ensure t
    :config
    (require 'company)
    (add-hook 'TeX-mode-hook 'tex-company-init))
#+end_src

** Keybinds
*** Defines local keybinds
    :PROPERTIES:
    :ORDERED:  t
    :END:
#+begin_src emacs-lisp :tangle yes
  (defun tex-par ()
    (interactive)
    (insert "\\par "))

  (defun tex-large ()
    (interactive)
    (insert "\\large "))

  (defun tex-bold ()
    (interactive)
    (insert "\\textbf{} ")
    (forward-char -2))

  (defun tex-italic ()
    (interactive)
    (insert "\\textit{} ")
    (forward-char -2))

  (defun tex-emph ()
    (interactive)
    (insert "\\emph{} ")
    (forward-char -2))

  (defun tex-underline ()
    (interactive)
    (insert "\\underline{} ")
    (forward-char -2))

  (defun tex-section ()
    (interactive)
    (insert "\\section{} ")
    (forward-char -2))

  (defun tex-newpage ()
    (interactive)
    (insert "\\newpage "))

  (defun tex-math ()
    (interactive)
    (insert "\\)"))

  (defun copy-twice-then-format (format-text str)
    (format format-text str str))

  (defun tex-begin-name (name)
    (interactive)
    (insert (copy-twice-then-format "\\begin{%s}\n\n\\end{%s}" name))
    (forward-line -1))

  (defun tex-begin-any ()
    (interactive)
    (tex-begin-name (read-string "Enter begin prompt: ")))

  (defun tex-begin-center ()
    (interactive)
    (tex-begin-name "center"))

  (defun tex-begin-flush ()
    (interactive)
    (tex-begin-name (read-string "Enter flush direction: ")))

  (defun tex-itemize ()
    (interactive)
    (tex-begin-name "itemize"))

  (defun tex-begin-listing ()
    (insert "\begin{lstlisting}[language=Lisp, caption=Caption, tabsize=2, breaklines=true, columns=flex, numbers=left, numberstyle=\tiny]\n\n\end{lstlisting}")
    (forward-line -1))
#+end_src

*** Sets local bindings
#+begin_src emacs-lisp :tangle yes
  (defun tex-bindings ()
    (local-set-key (kbd "C-z p") 'tex-par)
    (local-set-key (kbd "C-z l") 'tex-large)
    (local-set-key (kbd "C-z b") 'tex-bold)
    (local-set-key (kbd "C-z i") 'tex-italic)
    (local-set-key (kbd "C-z e") 'tex-emph)
    (local-set-key (kbd "C-z u") 'tex-underline)
    (local-set-key (kbd "C-z s") 'tex-section)
    (local-set-key (kbd "C-z n") 'tex-newpage)
    (local-set-key (kbd "C-c ba") 'tex-begin-any)
    (local-set-key (kbd "C-c bc") 'tex-begin-center)
    (local-set-key (kbd "C-c bf") 'tex-begin-flush)
    (local-set-key (kbd "C-c it") 'tex-itemize)
    (local-set-key (kbd "C-c fp") 'tex-begin-listing))

  (add-hook 'TeX-mode-hook 'tex-bindings)
#+end_src

* Prolog
** Prolog Mode
Sets prolog mode
#+begin_src emacs-lisp :tangle yes
  (add-to-list 'load-path "~/home/.emacs.d/prolog")
  (autoload 'prolog-mode "prolog" "Major mode for editing Prolog programs." t)
  (add-to-list 'auto-mode-alist '("\\.pl\\'" . prolog-mode))
#+end_src

** Electric if then else
From pceprolog.
#+begin_src emacs-lisp :tangle yes
  (setq prolog-electric--if-then-else t)
#+end_src
