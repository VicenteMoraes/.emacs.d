#+TITLE: Emacs Init Config in Org Mode
#+AUTHOR: [[https://github.com/VicenteMoraes][VicenteMoraes]]

* Org
Keeping yourself organised
** Keybinds
#+begin_src emacs-lisp :tangle yes
(global-set-key (kbd "C-c l") 'org-store-link)
(global-set-key (kbd "C-c a") 'org-agenda)
(global-set-key (kbd "C-c c") 'org-capture)
#+end_src

** Org src on the same window
#+begin_src emacs-lisp :tangle yes
  (setf org-src-window-setup 'current-window)
#+end_src

* Ido
Improves searching considerably
** Enable Ido Mode
#+begin_src emacs-lisp :tangle yes
  (setf ido-enable-flex-matching t)
  (setf ido-create-new-buffer 'always)
  (setf ido-everywhere t)
  (ido-mode 1)
#+end_src

* Beacon
Highlights the current line when you switch buffers
#+begin_src emacs-lisp :tangle yes
  (use-package beacon
    :ensure t
    :config (beacon-mode 1))
#+end_src

* Company
Auto completion
#+begin_src emacs-lisp :tangle yes
  (use-package company
    :ensure t
    :init (add-hook 'after-init-hook 'global-company-mode)
    :config
    (setf company-idle-delay 0)
    (setf company-minimum-prefix-length 3)
    (define-key company-active-map (kbd "M-n") nil)
    (define-key company-active-map (kbd "M-p") nil)
    (define-key company-active-map (kbd "C-n") #'company-select-next)
    (define-key company-active-map (kbd "C-p") #'company-select-previous)
    (define-key company-active-map (kbd "SPC") #'company-abort))
#+end_src

* Sudo-edit
Easy sudo editing within emacs
#+begin_src emacs-lisp :tangle yes
  (use-package sudo-edit
    :ensure t
    :bind ("C-c sudo" . sudo-edit))
#+end_src
* Which-key
Utility for checking out what keys do
#+begin_src emacs-lisp :tangle yes
  (use-package which-key
    :ensure t
    :init (which-key-mode))
#+end_src

* Smex
Ido for M-x
#+begin_src emacs-lisp :tangle yes
(use-package smex
    :ensure t
    :init (smex-initialize)
    :bind ("M-x" . smex))
#+end_src

* Projectile
Easy pretty project interface (Searching within projects)
#+begin_src emacs-lisp :tangle yes
  (use-package projectile
    :ensure t
    :config
    (define-key projectile-mode-map (kbd "C-x p") 'projectile-command-map)
    (projectile-mode 1))
#+end_src

* Dashboard
Pretty dashboard
#+begin_src emacs-lisp :tangle yes
  (setf inhibit-startup-message t)
  (use-package dashboard
    :ensure t
    :config
    (dashboard-setup-startup-hook)
    (setf dashboard-items '((recents . 7) (projects . 3)))
    (setf dashboard-banner-logo-title "Emacs do Vicente"))
#+end_src

* Magit
Git
#+begin_src emacs-lisp :tangle yes
  (use-package magit
    :ensure t
    :config
    (setq magit-push-always-verify nil)
    (setq git-commit-summary-max-length 50)
    :bind
    ("M-s" . magit-status)
    ("C-x g" . magit-dispatch-popup))
#+end_src

* Avy
Searches by char on screen
#+begin_src emacs-lisp :tangle yes
  (use-package avy
    :ensure t
    :bind
    ("C-." . avy-goto-char)
    ("C->" . avy-goto-line))
#+end_src

* Text
** Keybinds
*** Set begin_src macro for org mode to <C-c> src
#+begin_src emacs-lisp :tangle yes
  (defun get-org-src ()
    (interactive)
    (insert "#+begin_src\s\n\n#+end_src")
    (forward-line -2)
    (end-of-line))
  (global-set-key (kbd "C-c src") 'get-org-src)
#+end_src

*** Swap C-a (beginning-of-line) and M-m (back-to-indentation)
#+begin_src emacs-lisp :tangle yes
  (global-set-key (kbd "C-a") nil)
  (global-set-key (kbd "M-m") nil)
  (global-set-key (kbd "C-a") 'back-to-indentation)
  (global-set-key (kbd "M-m") 'beginning-of-line)
#+end_src

*** Sets RET to (reindent-then-newline-and-indent)
#+begin_src emacs-lisp :tangle yes
  (global-set-key (kbd "RET") nil)
  (global-set-key (kbd "RET") 'reindent-then-newline-and-indent)
#+end_src

** Utility
*** Always show matching parenthesis
#+begin_src emacs-lisp :tangle yes
(show-paren-mode 1)
#+end_src

** Electric key pairs
#+begin_src emacs-lisp :tangle yes
  (setq electric-pair-pairs '(
			     (?\{ . ?\})
			     (?\( . ?\))
			     (?\[ . ?\])
			     (?\" . ?\")))
  (electric-pair-mode 1)
#+end_src

* Editor
** Bars
#+begin_src emacs-lisp :tangle yes
(tool-bar-mode 0)
(menu-bar-mode 0)
(scroll-bar-mode 0)
#+end_src

** Globals
#+begin_src emacs-lisp :tangle yes
  (global-hl-line-mode t)
  (global-display-line-numbers-mode)
  (global-subword-mode 1)
#+end_src

** Aliases
#+begin_src emacs-lisp :tangle yes
(defalias 'yes-or-no-p 'y-or-n-p)
#+end_src

** Appearance
*** Font
#+begin_src emacs-lisp :tangle yes
  (set-default-font "Ubuntu Mono:pixelsize=14:antialias=true:
		     autohint=true")
#+end_src

*** Theme - Seoul256
#+begin_src emacs-lisp :tangle yes
  (use-package seoul256-theme
    :ensure t
    :config
    (setq seoul256-background 233)
    (load-theme 'seoul256 t))
#+end_src

*** Pretty symbols
#+begin_src emacs-lisp :tangle yes
  (use-package pretty-mode
    :ensure t
    :config (global-pretty-mode t))
#+end_src

** UTF-8 enconding
#+begin_src emacs-lisp :tangle yes
  (setf locale-coding-system 'utf-8)
  (set-terminal-coding-system 'utf-8)
  (set-keyboard-coding-system 'utf-8)
  (set-selection-coding-system 'utf-8)
  (prefer-coding-system 'utf-8)
#+end_src
** Random Qol
*** Ignore Bell
#+begin_src emacs-lisp :tangle yes
(setf ring-bell-function 'ignore)
#+end_src

*** Less obnoxious scroll
#+begin_src emacs-lisp :tangle yes
(setf scroll-conservatively 100)
#+end_src

*** Enable disabled commands
#+begin_src emacs-lisp :tangle yes
  (setf disabled-command-function nil)
#+end_src

*** Loads this config
#+begin_src emacs-lisp :tangle yes
  (defun load-my-org-config ()
    (interactive)
    (save-buffer)
    (org-babel-load-file (expand-file-name "config.org" user-emacs-directory)))
  (global-set-key (kbd "C-c eload") 'load-my-org-config)
#+end_src

*** Use asynchronous process wherever possible
#+begin_src emacs-lisp :tangle yes
  (use-package async
    :ensure t
    :init (dired-async-mode 1))
#+end_src

*** Show lines and columns on the modeline
#+begin_src emacs-lisp :tangle yes
  (line-number-mode 1)
  (column-number-mode 1)
#+end_src
** Buffers
*** Sets ibuffer and expert mode
#+begin_src emacs-lisp :tangle yes
  (global-set-key (kbd "C-x b") 'ibuffer)
  (setf ibuffer-expert t)
#+end_src

*** Sets ido-buffer
#+begin_src emacs-lisp :tangle yes
  (global-set-key (kbd "C-x C-b") 'ido-switch-buffer)
#+end_src

* Slime
Lisp interpretation mode
#+begin_src emacs-lisp :tangle yes
  (use-package slime
    :ensure t
    :config
    (setf inferior-lisp-program "/usr/bin/sbcl")
    (setf slime-contribs '(slime-fancy)))

  (use-package slime-company
    :ensure t
    :init
      (require 'company)
      (slime-setup '(slime-fancy slime-company)))
#+end_src

* Python
#+begin_src emacs-lisp :tangle yes
  (use-package company-jedi
    :ensure t
    :config
      (require 'company)
      (add-to-list 'company-backends 'company-jedi))
#+end_src
